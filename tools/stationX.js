import Web3 from 'web3';
import { info } from './other.js';

export const dataStationCreate = async(rpc, addressFrom) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));

    const timeNow = parseInt(Date.now() / 1000 + 24 * 60 * 60);
    const encodeABI = '0xc51aefcc'
        + '0000000000000000000000000000000000000000000000000000000000000200'
        + '0000000000000000000000000000000000000000000000000000000000000240'
        + '0000000000000000000000000000000000000000000000008ac7230489e80000'
        + '00000000000000000000000000000000000000000000000000000000000f4240'
        + '00000000000000000000000000000000000000000000000000000000000f4240'
        + '0000000000000000000000000000000000000000000000000000000000989680'
        + '0000000000000000000000000000000000000000000000000000000000000000'
        + (w3.utils.padLeft(timeNow, 64)).slice(2)
        + '0000000000000000000000000000000000000000000000000000000000000001'
        + '0000000000000000000000000000000000000000000000000000000000000001'
        + '00000000000000000000000045a27ea11d159a86aace1ec24d3ba3d103642d9f'
        + '0000000000000000000000000000000000000000000000000000000000000280'
        + '0000000000000000000000000000000000000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000001'
        + '0000000000000000000000000000000000000000000000000000000000000004'
        + '7465737400000000000000000000000000000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000004'
        + '5445535400000000000000000000000000000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000001'
        + (w3.utils.padLeft(addressFrom, 64)).slice(2);

    const estimateGas = await w3.eth.estimateGas({ data: encodeABI, from: addressFrom, to: info.stationX });
    return { encodeABI, estimateGas };
}

export const dataStationClaimUSDC = async(rpc, addressFrom) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));

    const encodeABI = '0x9a15bf920000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000';
    const estimateGas = await w3.eth.estimateGas({ data: encodeABI, from: addressFrom, to: info.stationXUSDC });
    return { encodeABI, estimateGas };
}

export const dataStationMint = async(rpc, addressFrom) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));

    const encodeABI = '0xe82a22d5'
        + (w3.utils.padLeft(addressFrom, 64)).slice(2)
        + '000000000000000000000000f06a087d97b3e9eadbdc7cd3c2146bc4d019bb19'
        + '00000000000000000000000000000000000000000000000000000000000000a0'
        + '0000000000000000000000000000000000000000000000000000000000000001'
        + '0000000000000000000000000000000000000000000000000000000000000120'
        + '0000000000000000000000000000000000000000000000000000000000000050'
        + '697066733a2f2f626166797265696636746e637373687434797377657177746c'
        + '676e667978787473676c746164366575626a37353333617476693435746f686b'
        + '32712f6d657461646174612e6a736f6e00000000000000000000000000000000'
        + '0000000000000000000000000000000000000000000000000000000000000000';
        

    const estimateGas = await w3.eth.estimateGas({ data: encodeABI, from: addressFrom, to: info.stationX });
    return { encodeABI, estimateGas };
}