import Web3 from 'web3';
import { info } from './other.js';
import { nfts2Abi } from './abi.js';

export const dataCreateCollection2ME = async(rpc, addressTo) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));

    const randomBytes32 = w3.utils.randomHex(32).slice(2);
    const encodeABI = '0x41ea249b'
    + '0000000000000000000000000000000000000000000000000000000000000140'
    + '0000000000000000000000000000000000000000000000000000000000000180'
    + '00000000000000000000000000000000000000000000000000000000000001c0'
    + 'f269ca26ef7481ab30940545c9fc403e5232c995ff33ecec89f7b3afdab30553'
    + '0000000000000000000000000000000000000000000000000000000000000220'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + '00000000000000000000000000000000000000000000000000000000000002ee'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + randomBytes32
    + '3732310000000000000000000000000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000016'
    + '4c696e656120566f79616765202d204e465473324d6500000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000d'
    + '4c494e45412d4e465453324d4500000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000002'
    + '000000000000000000000000c5557771673109cab9d05358e1d280fab5225977'
    + (w3.utils.padLeft(addressTo, 64)).slice(2)
    + '0000000000000000000000000000000000000000000000000000000000000000';

    const estimateGas = await w3.eth.estimateGas({ data: encodeABI, from: addressTo, to: info.nfts2me });
    return { encodeABI, estimateGas };
}

export const dataCreateEditionCollection2ME = async(rpc, addressTo) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));

    const randomBytes32 = w3.utils.randomHex(32).slice(2);
    const encodeABI = '0x638860eb'
    + '00000000000000000000000000000000000000000000000000000000000001a0'
    + '00000000000000000000000000000000000000000000000000000000000001e0'
    + '000000000000000000000000000000000000000000000000016345785d8a0000'
    + 'f269ca26ef7481ab30940545c9fc403e5232c995ff33ecec89f7b3afdab30553'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000220'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000064'
    + '00000000000000000000000000000000000000000000000000000000000002ee'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000000'
    + randomBytes32
    + '3732310000000000000000000000000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000016'
    + '4c696e656120566f79616765202d204e465473324d6500000000000000000000'
    + '000000000000000000000000000000000000000000000000000000000000000d'
    + '4c494e45412d4e465453324d4500000000000000000000000000000000000000'
    + '0000000000000000000000000000000000000000000000000000000000000000';

    const estimateGas = await w3.eth.estimateGas({ data: encodeABI, from: addressTo, to: info.nfts2me });
    return { encodeABI, estimateGas };
}

export const dataSetToPublic2ME = async(rpc, addressColl, addressTo) => {
    const w3 = new Web3(new Web3.providers.HttpProvider(rpc));
    const contract = new w3.eth.Contract(nfts2Abi, addressColl);

    const data = await contract.methods.setPhase(
        2
    );
    
    const encodeABI = data.encodeABI();
    const estimateGas = await data.estimateGas({ from: addressTo });
    return { encodeABI, estimateGas };
}